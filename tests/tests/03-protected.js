describe('Protected model', function() {
	var Base = Protected.extend({
		public_fields: [
			'id',
			'name'
		],
		private_fields: [
			'text',
			'tags'
		]
	});

	turtl.profile = new Profile();
	var keychain = turtl.profile.get('keychain');

	// replace our sync so it's mem-only (no IDB)
	var sync;
	beforeAll(function() {
		sync = Composer.sync;
		Composer.sync = function(method, model, options)
		{
			if(options.success) options.success();
		};
	});
	afterAll(function() {
		Composer.sync = sync;
	});

	it('generates and/or ensures existence of keys', function() {
		var base = new Base();

		expect(base.key).toBe(null);

		var key = base.generate_key();
		expect(Array.isArray(key)).toBe(true);
		expect(base.key).toBe(key);

		var base2 = new Base();
		base2.create_or_ensure_key();
		var key2 = base2.key;
		base2.create_or_ensure_key();
		var key3 = base2.key;

		expect(key2).toBe(key3);
	});

	it('encrypts/decrypts models', function(done) {
		var base = new Base({
			id: 6969,
			name: 'andrew',
			text: 'this will be encrypted',
			tags: 'dogs,chairs,yachts,etc'
		});

		var key = base.generate_key();

		base.serialize()
			.then(function(data) {
				var enc = data[0];
				var keys = Object.keys(enc).sort().join(',');
				expect(keys).toBe(['body', 'id', 'name'].join(','));
				return enc;
			})
			.then(function(enc) {
				var base2 = new Base(enc);
				base2.key = key;
				return base2.deserialize();
			})
			.then(function(data) {
				expect(data.text).toBe('this will be encrypted');
				expect(data.tags).toBe('dogs,chairs,yachts,etc');
			})
			.finally(done);
	});

	it('returns only private/body fields with safe_json()', function(done) {
		var base = new Base({
			id: 123,
			name: 'cwarrrrll',
			text: 'how many more lies must we listen to',
			tags: 'zombies,punks'
		});

		expect(JSON.stringify(base.safe_json())).toBe('{"id":123,"name":"cwarrrrll"}');

		var body = null;
		base.generate_key();
		base.serialize()
			.then(function() {
				body = base.safe_json().body;
			})
			.finally(function() {
				expect(typeof body).toBe('string');
				done();
			});
	});

	it('generates subkeys and finds it\'s decrypting key(s) properly', function() {
		var key = tcrypt.random_key();
		var parent = new Base({id: 1});
		var child = new Base({id: 2});
		parent.key = key;
		keychain.add_key(parent.id(), 'board', parent.key);

		child.generate_key();
		var childkey = child.key;
		child.generate_subkeys([ {b: parent.id(), k: parent.key} ]);

		child.key = null;

		var parent_key = keychain.find_key(parent.id());
		var found = child.find_key(undefined, {b: [{id: parent.id(), k: parent_key}]});
		expect(tcrypt.to_base64(found)).toBe(tcrypt.to_base64(childkey));
	});
});

describe('ProtectedShared model', function() {
	var key = {
		private: "",
		public: "LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tDQpWZXJzaW9uOiBPcGVuUEdQLmpzIHYxLjAuMQ0KQ29tbWVudDogaHR0cDovL29wZW5wZ3Bqcy5vcmcNCg0KeHNGTkJGWnoxbWNCRUFDdTZIMjFaaFU3Q25IWUJCWFlHSURXSVMxNGkrUHBkWTBoeFNSSCtYYW5pdkVTCnNhdFA0V01iZjIzYjdxdjV0RmhGdmFBOXN1TzY2QitHQ2RRZmVPQjMzeE8yUlhhNmU3cllmU2N6ZUhtMwo4VGw1VDU0aTdFajU1RUY0a1RscWduWHZFZmZTSXlDeHY3ZGs0dzVqSVcyU1pFTzVwUDV2V29OVlltZnYKb2prbFV5UTJhRENyVXhpQ0Y5RVZsbWxhNkgwNWk4Rm1hQm83UGE4eVVyOGZDeTFWT3pRMC95TEFOZFZKCldQYVVRVFdXT3RpRU9sNnhpYkxBREc0ejExbXZEVk8ySytJV2N4Q1pyWkFVT1lvd3FXNjBtOEVmdHUzdQpZU2I0dEY2WFUvMW92MGExdjI0WWFUODNWeHp2S2xEK0RoWjFUK0NSUVJwRTNsZ2k4bzQzK2NZN2RJTzIKVExZMTNzVHVlTm1WYjZ5cDl2NURsR0ZYSDEvSGdkOUFlNlNmYkYvQnlHNmlVTENiejhseHhPU0dIdk0yCnkweS81NjF2Rkd1SVhYSHg0Tm84TUdSRHZrMkdzU3cxWitxaXd6cDNDTExWZlR2eEFTOG5nbWU4NFdSQgpDaHBad0RiaHNDNlZXUmM1U1NmWkVRMmQ5amxwZS9acE1iTnZ3MGsxV1RYN2R3ME9MWTVKQnNMWVAwZXIKUWQ5RGVtVmI5L2E2SkxXRGZuakFvRURiWE1WcWM2Y0prcitoVmpuZG9LdXQwanVzZlRrcWh6NS81Q3hVCmJ1YmVoMEFROUpKdG1mNkN2Q3J4a2s5L1R0ZHJGUUtacU5SNXduTjZoMWxDcjNQRHRaNVorZGJ4Y2U2UApqMWJtcm9lYWxkZjNBK2dsMkQyNUlMOVp5NHFtYmJVL2Fhb2crd0FSQVFBQnpSTmhibVJ5WlhkQWJIbHYKYm1KeWIzTXVZMjl0d3NGeUJCQUJDQUFtQlFKV2M5WndCZ3NKQ0FjREFna1FvZlhMMkNWWnZqMEVGUWdDCkNnTVdBZ0VDR3dNQ0hnRUFBTTRrRC85N1g1Wi8ybnhGVnFrVE52cW5HUi9URHgyOEo5VlpFUE5haXh2QwpKSStyNzVaU3I1M085WE91b1RUdEUvdlB4UEw4V0s2Ynl1SUxFNlB1Yi9vZHNHam5uSUw4UXlBRGI2K3UKSkdzM3h5VzhxSmdnYVJJZWNkMVhxSlNMOVdzTGpHSXJCclpicXlUK3lDNWR1Q05yM24yTXBWV1BFVDZmCjV1cU9zZ0ltSXlscVkwMitIWDkwY01JTWtWUWI5WlJNOHpkTVRSRmJmeUs2Y3JGd0hsMnk1Z25GMDRIbgowMGR3M3lZemwzQjNPTnRVdk9QR04xdVVDdmhVa3hja1hIaGt3dFdGbjhQSHd1MmZsMEJOSGlvUWF1dnoKMFUxR3FrZGVoWnplZWJjVXlLNkx6Q0RGWXAzR1lVMzNzbFhOVzJCeG5qT0lKbno3UnpmZnMzN1oxbis0Cm5haGhkZ0NhU1llNlFDL2FNQnN2MHE0MllSVFZSK0xKZzV1UWtDbDNINVdjbTlMd1Z4ZGI4NGQ2dHBSSQp5b3FXSEw0RWY4Mnhvb1YreHhPWWNtRnpaVU9qeVRIdFlEdkFZWWhMMjIvM1pFRklVcUtoaGY3RkJpQ3cKQlE0cHlOTStoUmR0ZmtJNFR0TmJKRXgzazA5N21iSkVlMHMyZFlEL3RZeGd4YTRPdjRnQzczY2NSRDN5CjdsRHB4YUtCWXpzemtKR0FIMSsxMjAvUGlUb0ZyWkJWZ2pFWlBlSW1rY2VybkgwVHgvSWc1aEJGM0hHaQpJa0RUWmN1VnZSeXN4d2l3ZXpCeWVvYjQrditqY2NReEYyaFpBa0FMUFdDQzEvNEd1ejY0c1hjS1hmU0kKdzIvTjBFYk01K2VleVlsRVEzb2FJYlBHRWRIZU1IQTVBQTBadmQ2M1JOVlVGczdCVFFSV2M5Wm5BUkFBCnRlaGdncDZ1UHlPcC9PMmhTNjU2Q1BodkpyaE5ZSnlHU25NSW51VlpaeVpXZHJlREhDWjBCZXhQc0ZwdgpvWkozd3BSS1l1ZUFSZjF4ZVZramZRUzgwUHdXc1VPcGdEQUhma0R4ZnRLUDd4aWNGUE13M2tneHhORzQKSzJGOWFPeDJsMVhwRTVHOUdab0pBbWdwM0RYNDNmMVB4UTI2UklIbHJSVStHY2N2SzhWSzBnUkw4cFA4Ck5SRXBSVUdpbVY2aEtNNmdlaFBxRzF1elBEUFExRGZJc2VTblI4d3BUOXN6L0RhbXZGSjdRYXdhZ2pMTwpYWGxmZ1YrL2w4aUsyTEZhWHFpbndGSWRCdEp2eVYxQ3hkYUNybi9WQWlIano5aXhoUXZDVjFjUW9VZzIKQXRWMUVzWEJxU1Q5SE82SzdMei9BdllvQ2hOTGFmWHhZRFBSdVMxV1N2SUhySFpJR2t5RVBHdU5NRWkyCkl4QlB2dlJ3WnJiVXVmNGdRSTNDRzdQM1g3eG1IbTd4bTkrL0FGbUl4TnNTMzFodmREc0hicUFWQVFGegp3QW4rWHNBTTZVNlBUZlRkSUVVRkNycnQ4YUM3V05iWFdORHpZSWVuSTV4K21UQnIyWDFJZExwdEFKT3EKalpLWllBRVc5K2plMlJSQW1hTXBnMWxIZWI1UVV0dkxQNGtyQUszRXl0NS9TMXZpM1B0dklQVXQvZEZICk5Ob0pkRWlZSjVaU0szQytoem5pTVFmaDk5ejd1T0ZqUkxSTDlOWlgzcEdLUVFYU3l4emxDaUgrQ2NaYwpobGN6d3VMSEZNTnlrUkxvaTk5c0M0ZXp2akkrUVZjTjBTRUhmU01IcVVaYWRoK1hMNzV6Z2RXR09Xay8KdEVtZ3JHbmlqYlUydFNjVXN5MEpTdWtBRVFFQUFjTEJYd1FZQVFnQUV3VUNWblBXY3drUW9mWEwyQ1ZaCnZqMENHd3dBQUdrZkVBQ1lhR3ZGaWJ6cVdwTE85N1N1am1FY1VFbXRuWitCdnVpUzNHU3BvclEvUDFSOQprdi94Um9kdUkwODVqYlpPaGFMbUVPTTVxRWJlWitOaUxVV29iWDhzVnQyZnBaRVVxYWNqT0JYMjkvd1kKWkVQR2NRSWFjUlhMRU5HRFBqaTAvWDZNZmErQWNRT2ExSW1WeWZCbTY4a1MrS1FBcmlLak1uL1NYVGJpCmlrZE1RQVd2STRpbXQrTHJ5R1M4b3ZNdE9wdk5EZzJ2RlBPVmNiTTlmSVoyOEZET3lJR1hwWWkzMGFyVwpzcHpjc21DS3pUL29vaXZKRzRxcFNvVlFlTDVkVzN2Rjl6cUtHZzJjS2lmM1V5L0Y3L3ZQVkxRSTU2MHIKbnNIUWtxV0FPcDQvMVAyeHdubjNmM3EyR21oMTNJS29WYWgyWll0TkR6ZzFVTGo4czFHRXF6VUp4d2dUClNqcDQrS0NHVEl4WG1XOSt4UkdObHlEY0lZd2RRYnY5eSt0aTE2T00xNFBPMHBLZlFuMWRkNTRWeWR3SApZblB1cFN1QldWbDRGTGxGWER6dVI5WGVsemVhVE1vdmJwbUpJSzAramw4SUlNczdJU2RvMGJNVEFjeEYKcXp3Y3VPM0RmVlo4MnR1N1lVVERnUE5zMWh1SnJxL2Y4OFJXckEyMmc0VHRpcnd5RjRTaW4vQThCVzEwCi9PSW1xWjlwWk5hYnRwODF4TEdBc2xDOEQwR0w3QlFJTGh2ZTUyQlVDd1EvbGhLUUhiN2ZGWDhVN1V5awppNnhyWVBOUnV1SXBTbUhPdEg2WklMekNqcEI0T05kcUpYUVczSkRFLzMrTFR1M1RhWUlyTHJkWEpFQVQKWUpDY0J0Q3diOXJMa0xibHlnUVJDY2haUER4NHFwNkNZem1oTkE9PQ0KPXVEangNCi0tLS0tRU5EIFBHUCBQVUJMSUMgS0VZIEJMT0NLLS0tLS0NCg0K"
	};
	var Message = ProtectedShared.extend({
	});

	it('encrypts/decrypts a payload properly (asymmetric)', function(done) {
		var msg = new Message({body: 'hello, simon'});
		msg.public_key = atob(key.public);
		var enc, dec;
		msg.encrypt()
			.then(function(_enc) {
				enc = _enc;
				var msg2 = new Message({body: enc});
				msg2.private_key = atob(key.private);
				return msg2.decrypt();
			})
			.then(function(_dec) {
				dec = _dec;
			})
			.finally(function() {
				expect(!!enc.match(/-BEGIN PGP MESSAGE/)).toBe(true);
				expect(dec).toBe('hello, simon');
				done();
			});
	});
});

