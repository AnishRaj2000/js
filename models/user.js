var User = Protected.extend({
	base_url: '/users',
	local_table: 'user',

	public_fields: [
		'id',
		'storage',
		'name',
		'username',
		'pubkey',
	],

	private_fields: [
		'settings',
		'privkey',
	],

	logged_in: false,
	logging_in: false,
	changing_password: false,

	auth: null,

	init: function() {
		this.logged_in = false;
		this.logging_in = false;
	},

	login: function(username, password) {
		this.logging_in = true;
		return turtl.core.send('user:login', username, password)
			.bind(this)
			.then(function(userdata) {
				this.logged_in = true;
				this.set(userdata);
				if(config.cookie_login) {
					this.write_cookie(username, password);
				}
			})
			.finally(function() {
				this.logging_in = false;
			});
	},

	login_from_auth: function(auth)
	{
		if(!auth) return false;
		this.set({id: auth.uid});
		this.set('username', auth.username);
		this.auth = auth.auth;
		this.key = tcrypt.key_from_string(auth.key);
		this.logged_in = true;
		this.trigger('login', this);
	},

	login_from_cookie: function()
	{
		var cookie = localStorage[config.user_cookie];
		if(!cookie) return Promise.reject();

		var userdata = JSON.parse(cookie);
		return this.login(userdata.username, userdata.password);
	},

	/**
	 * add a new user.
	 *
	 * note that we don't do the usual model -> local db -> API pattern here
	 * because the local db relies on the user id (which is generated by the
	 * API) and because in the off-chance that there's a failure syncing the
	 * user record after the fact, it could serverely screw some things up in
	 * the client.
	 *
	 * instead, we post to the API, then once we have a full user record that we
	 * know is in the API, we wait for the local DB to init (poll it) and then
	 * add our shiny new user record to it.
	 */
	join: function(options)
	{
		options || (options = {});
		return Promise.resolve(tcrypt.asym.keygen())
			.bind(this)
			.then(function(keypair) {
				this.set({
					pubkey: tcrypt.to_base64(keypair.pubkey),
					privkey: tcrypt.to_base64(keypair.privkey),
				});
				// wipe the cache manually
				this.key = null;
				this.auth = null;
				return this.gen_auth(this.get('username'), this.get('password'));
			})
			.tap(function() {
				return this.serialize();
			})
			.then(function(auth) {
				var data = {
					auth: auth,
					username: this.get('username'),
					data: this.safe_json(),
				};
				return turtl.api.post('/users', data);
			})
			.tap(function(user) {
				// once we have the user record, wait until the user is logged
				// in. then we poll turtl.db until our local db object exists.
				// once we're sure we have it, we save the new user record to
				// the local db.
				this.bind('login', function() {
					this.unbind('login', 'user:join:add_local_record');
					var check_db = function()
					{
						if(!turtl.db)
						{
							check_db.delay(10, this);
							return false;
						}
						this.save();
					}.bind(this);
					check_db.delay(1, this);
				}.bind(this), 'user:join:add_local_record');
			});
	},

	/**
	 * Remove a user's account and all their data.
	 */
	delete_account: function(options)
	{
		return turtl.api._delete('/users/'+this.id())
			.then(function(res) {
				return turtl.wipe_local_db();
			})
			.then(function() {
				return turtl.user.logout();
			});
	},

	/**
	 * change the username/password.
	 *
	 * this assumes the current account has been verified, and does no checking
	 * itself.
	 *
	 * here's how this works:
	 *
	 *   1. generate a new master key using the new u/p
	 *   2. generate a new auth token using the new key
	 *   3. save the auth token to the API
	 *   4. use the new key to re-encrypt and save *every* keychain entry
	 *
	 * done! because all non-keychain objects are self-describing, we only need
	 * to encrypt keychain entries and we're good to go.
	 */
	change_password: function(new_username, new_password)
	{
		// TODO:
		// - using a tmp user object, generate new key/auth token with new
		//   username/password
		// - copy keychain to new object, re-encrypt new/copied keychain with
		//   new user key
		// - save the entire bunch to the API in one call (new username, new
		//   auth token, entire keychain)! no syncing here...it's either all or
		//   nothing.
		// - on success, REPLACE user's key/auth token/keychain with new ones
		//
		// no need to roll back on failure, because everything is a copy of a
		// copy of a copy. either everything works prefectly and we post it to
		// the server, or one tiny thing goes wrong and we post nothing.

		// welcome to the future. welcome to a brand new you.
		var user = new User(turtl.user.toJSON());
		var auth = null;
		user.set({
			username: new_username,
			password: new_password,
		});
		return user.gen_auth(new_username, new_password)
			.then(function(_auth) {
				auth = _auth;
				return user.serialize();
			})
			.then(function() {
				// copy in the keychain
				return Promise.map(turtl.profile.get('keychain').models(), function(keyentry) {
					var newkey = new KeychainEntry();
					newkey.key = user.key;
					newkey.set(keyentry.toJSON());
					return newkey.serialize()
						.then(function() {
							return newkey.safe_json();
						});
				});
			})
			.then(function(keys) {
				var userdata = user.safe_json();
				var auth_change = {
					user: {
						username: userdata.username,
						body: userdata.body,
					},
					auth: auth,
					keychain: keys,
				};
				return turtl.api.put('/users/'+turtl.user.id(), auth_change);
			})
			.then(function(res) {
				turtl.sync.ignore_on_next_sync(res.sync_ids);
				turtl.user.key = null;
				turtl.user.auth = null;
				return turtl.user.login({username: new_username, password: new_password}, {silent: true})
					.then(function() {
						return turtl.user.save();
					})
					.then(function() {
						turtl.profile.get('keychain').each(function(key) {
							key.key = user.key;
							key.save({skip_remote_sync: true});
						});
					});
			})
			.then(function() {
				setTimeout(function() {
					turtl.user.logout();
				}, 3000);
			});
	},

	write_cookie: function(username, password)
	{
		var save = {
			id: this.id(),
			username: username,
			password: password,
		};
		localStorage[config.user_cookie] = JSON.stringify(save);
	},

	clear_cookie: function() {
		delete localStorage[config.user_cookie];
	},

	do_logout: function(options) {
		options || (options = {});
		this.logged_in = false;
		this.clear();
		this.trigger('logout', this);
	},

	logout: function(options)
	{
		options || (options = {});
		return turtl.core.send('user:logout', options.clear_cookie)
			.bind(this)
			.then(function() {
				if(!options.skip_do_logout) this.do_logout(options);
			});
	},

	setting: function(key, val)
	{
		var settings = clone(this.get('settings') || {});
		if(val === undefined) return settings[key];
		settings[key] = val;
		this.set({settings: settings});
	},

	delete_setting: function(keyspec)
	{
		if(!keyspec) return;
		var settings = clone(this.get('settings') || {});

		var re = new RegExp('^'+keyspec.replace(/\*/g, '.*?')+'$');
		Object.keys(settings).forEach(function(key) {
			if(key.match(re)) delete settings[key];
		});
		this.set({settings: settings});
	},

	resend_confirmation: function()
	{
		return turtl.api.post('/users/confirmation/resend');
	},

	find_by_email: function(email)
	{
		return turtl.api.get('/users/email/'+email);
	},
});

// we don't actually use this collection for anything but syncing
var Users = SyncCollection.extend({
	model: User,
	local_table: 'user',

	sync_record_from_db: function(userdata, msg)
	{
		if(!userdata) return false;
		if(turtl.sync.should_ignore([msg.sync_id], {type: 'local'})) return false;

		turtl.user.set(userdata);
	},

	sync_record_from_api: function(item)
	{
		// make sure item.key is set so the correct record updates in the DB
		// (since we only ever get one user object synced: ours)
		item.key = 'user';
		return this.parent.apply(this, arguments);
	},

	run_incoming_sync_item: function(sync, item)
	{
		switch(sync.action) {
			case 'change-password':
				barfr.barf(i18next.t('Your password was changed. You will be logged out momentarily.'));
				// NOTE: this delay is important. it lets the sync system save the
				// sync id BEFORE logging out so we don't get into an endless logout
				// loop.
				setTimeout(function() { turtl.user.logout(); }, 3000);
				break;
			case 'edit':
				turtl.user.set(item);
				break;
			case 'delete':
				barfr.barf(i18next.t('Your account was deleted. You will be logged out momentarily.'));
				// NOTE: this timeout gives the sync system some time to mark
				// the item as handled before logging out. not that it REALLY
				// matters since the account will be deleted, but still.
				setTimeout(function() { turtl.user.logout(); }, 3000);
				break;
		} 
		return Promise.resolve();
	},
});

