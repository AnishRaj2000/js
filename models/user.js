var User = Composer.Model.extend({
	sync_type: 'user',

	logged_in: false,
	logging_in: false,
	changing_password: false,

	init: function() {
		this.logged_in = false;
		this.logging_in = false;
	},

	login: function(username, password) {
		this.logging_in = true;
		return turtl.core.send('user:login', username, password)
			.bind(this)
			.then(function(userdata) {
				this.logged_in = true;
				this.set(userdata);
				if(config.cookie_login) {
					this.write_cookie(username, password);
				}
			})
			.finally(function() {
				this.logging_in = false;
			});
	},

	login_from_auth: function(auth)
	{
		if(!auth) return false;
		this.set({id: auth.uid});
		this.set('username', auth.username);
		this.auth = auth.auth;
		this.key = tcrypt.key_from_string(auth.key);
		this.logged_in = true;
		this.trigger('login', this);
	},

	login_from_cookie: function()
	{
		var cookie = localStorage[config.user_cookie];
		if(!cookie) return Promise.reject();

		var userdata = JSON.parse(cookie);
		return this.login(userdata.username, userdata.password);
	},

	/**
	 * add a new user.
	 *
	 * note that we don't do the usual model -> local db -> API pattern here
	 * because the local db relies on the user id (which is generated by the
	 * API) and because in the off-chance that there's a failure syncing the
	 * user record after the fact, it could serverely screw some things up in
	 * the client.
	 *
	 * instead, we post to the API, then once we have a full user record that we
	 * know is in the API, we wait for the local DB to init (poll it) and then
	 * add our shiny new user record to it.
	 */
	join: function(username, password)
	{
		this.logging_in = true;
		return turtl.core.send('user:join', username, password)
			.bind(this)
			.then(function(userdata) {
				this.logged_in = true;
				this.set(userdata);
				if(config.cookie_login) {
					this.write_cookie(username, password);
				}
			})
			.finally(function() {
				this.logging_in = false;
			});
	},

	/**
	 * migrate an old account into a new one
	 */
	migrate: function(v6_username, v6_password, username, password) {
		this.logging_in = true;
		return turtl.core.send('user:join-migrate', v6_username, v6_password, username, password)
			.bind(this)
			.then(function(userdata) {
				this.logged_in = true;
				this.set(userdata);
				if(config.cookie_login) {
					this.write_cookie(username, password);
				}
			})
			.finally(function() {
				this.logging_in = false;
			});
	},

	can_migrate: function(username, password) {
		return turtl.core.send('user:can-migrate', username, password);
	},

	/**
	 * Remove a user's account and all their data.
	 */
	delete_account: function(options) {
		return turtl.core.send('user:delete-account');
	},

	/**
	 * change the username/password.
	 */
	change_password: function(cur_username, cur_password, new_username, new_password) {
		return turtl.core.send('user:change-password', cur_username, cur_password, new_username, new_password);
	},

	write_cookie: function(username, password)
	{
		var save = {
			id: this.id(),
			username: username,
			password: password,
		};
		localStorage[config.user_cookie] = JSON.stringify(save);
	},

	clear_cookie: function() {
		delete localStorage[config.user_cookie];
	},

	do_logout: function(options) {
		options || (options = {});
		this.logged_in = false;
		this.clear();
		this.trigger('logout', this);
	},

	logout: function(options)
	{
		options || (options = {});
		return turtl.core.send('user:logout', options.clear_cookie)
			.bind(this)
			.then(function() {
				if(!options.skip_do_logout) this.do_logout(options);
			});
	},

	setting: function(key, val)
	{
		var settings = clone(this.get('settings') || {});
		if(val === undefined) return settings[key];
		settings[key] = val;
		this.set({settings: settings});
		return this.save();
	},

	delete_setting: function(keyspec)
	{
		if(!keyspec) return;
		var settings = clone(this.get('settings') || {});

		var re = new RegExp('^'+keyspec.replace(/\*/g, '.*?')+'$');
		Object.keys(settings).forEach(function(key) {
			if(key.match(re)) delete settings[key];
		});
		this.set({settings: settings});
		return this.save();
	},

	resend_confirmation: function()
	{
		return turtl.core.send('user:resend-confirmation');
	},

	find_by_email: function(email)
	{
		return turtl.core.send('user:find-by-email', email);
	},
});

